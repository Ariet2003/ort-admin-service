generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  ADMIN
  STUDENT
}

model User {
  id          Int      @id @default(autoincrement())
  fullname    String
  username    String   @unique
  phoneNumber String?  @map("phone_number")
  telegramId  String?  @unique @map("telegram_id")
  points      Int      @default(0)
  avatarUrl   String?  @map("avatar_url")
  password    String
  role        UserRole @default(STUDENT)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  adminCreatedTests TrialTest[]        @relation("AdminCreatedTests")
  createdQuestions  TrialTestQuestion[] @relation("CreatedQuestions")
  createdCourses    Course[]        @relation("CreatedCourses")

  @@map("users")
}

model TrialTest {
  id                Int      @id @default(autoincrement())
  title             String
  description       String
  type              TrialTestType
  status            TrialTestStatus
  creatorAdminId    Int?    @map("creator_admin_id")
  durationMinutes   Int     @map("duration_minutes")
  totalQuestions    Int     @map("total_questions")
  createdAt         DateTime @default(now()) @map("created_at")
  updatedAt         DateTime @updatedAt @map("updated_at")

  creatorAdmin      User?   @relation("AdminCreatedTests", fields: [creatorAdminId], references: [id])
  questions         TrialTestQuestion[]

  @@map("trial_tests")
}

model TrialTestQuestion {
  id             Int      @id @default(autoincrement())
  trialTestId    Int      @map("trial_test_id")
  questionText   String   @map("question_text")
  imageUrl       String?  @map("image_url")
  optionA        String   @map("option_a")
  optionB        String   @map("option_b")
  optionC        String   @map("option_c")
  optionD        String   @map("option_d")
  subjectType    SubjectType @map("subject_type")
  correctOption  CorrectOption @map("correct_option")
  creatorId      Int      @map("creator_id")
  explanation    String?
  points         Int
  createdAt      DateTime @default(now()) @map("created_at")
  updatedAt      DateTime @updatedAt @map("updated_at")

  trialTest      TrialTest @relation(fields: [trialTestId], references: [id])
  creator        User      @relation("CreatedQuestions", fields: [creatorId], references: [id])

  @@map("trial_test_questions")
}

enum TrialTestType {
  free
  paid
}

enum TrialTestStatus {
  created
  in_progress
  ready
}

enum SubjectType {
  math1
  math2
  analogy
  reading
  grammar
}

enum CorrectOption {
  a
  b
  c
  d
}

model Course {
  id           Int        @id @default(autoincrement())
  title        String
  description  String
  price        Decimal    @default(0)
  creatorId    Int        @map("creator_id")
  accessType   CourseAccessType @map("access_type")
  createdAt    DateTime   @default(now()) @map("created_at")
  updatedAt    DateTime   @updatedAt @map("updated_at")

  creator      User       @relation("CreatedCourses", fields: [creatorId], references: [id])
  materials    CourseMaterial[]
  tests        CourseTest[]

  @@map("courses")
}

enum CourseAccessType {
  free
  paid
}

// Settings table used by API
model Setting {
  id        Int      @id @default(autoincrement())
  key       String   @unique
  value     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("settings")
}

model CourseMaterial {
  id                Int      @id @default(autoincrement())
  courseId          Int      @map("course_id")
  title             String
  description       String
  videoUrl          String   @map("video_url")
  lectureUrls       String[] @map("lecture_urls")
  presentationUrls  String[] @map("presentation_urls")
  orderNumber       Int      @map("order_number")
  createdAt         DateTime @default(now()) @map("created_at")
  updatedAt         DateTime @updatedAt @map("updated_at")

  course            Course   @relation(fields: [courseId], references: [id])

  @@map("course_materials")
}

model CourseTest {
  id             Int      @id @default(autoincrement())
  courseId       Int      @map("course_id")
  question       String
  optionA        String   @map("option_a")
  optionB        String   @map("option_b")
  optionC        String   @map("option_c")
  optionD        String   @map("option_d")
  correctOption  CourseTestCorrectOption @map("correct_option")
  explanation    String
  createdAt      DateTime @default(now()) @map("created_at")
  updatedAt      DateTime @updatedAt @map("updated_at")

  course         Course   @relation(fields: [courseId], references: [id])

  @@map("course_tests")
}

enum CourseTestCorrectOption {
  A
  B
  C
  D
}
